from colorama import Fore, Style

XSS_TEST_PAYLOAD = "<script>alert('XSS')</script>"
SQLI_TEST_PAYLOADS = ["'", "' OR 1=1 --", "\" OR \"1\"=\"1"]

def submit_form(session, form_details, payload, base_url, urljoin):
    action = form_details['action']
    method = form_details['method']
    url = urljoin(base_url, action)

    data = {}
    for input_field in form_details['inputs']:
        name = input_field['name']
        if name != "No Name":
            data[name] = payload 

    try:
        if method == "POST":
            response = session.post(url, data=data, timeout=5)
        else:
            respose = session.get(url, params=data, timeout=5)
        return response
    except Exception as e:
        print(Fore.RED + f" [-] Error submitting form: {e}", Style.RESET_ALL)
        return None
    
def test_sqli(session, form, base_url, vulnerabilities, urljoin):
    print(Fore.YELLOW + "   [*] Testing form for XSS...", Style.RESET_ALL)
    response = submit_form(session, form, XSS_TEST_PAYLOAD, base_url, urljoin)
    if response and XSS_TEST_PAYLOAD in response.text:
        print(Fore.RED + "  [!] Potential XSS Vulnerability found!", Style.RESET_ALL)
        vulnerabilities.append({
            'type' : 'XSS',
            'url' : base_url,
            'form' : form
        })

def test_sqli(session, form, base_url, vulnerabilities, urljoin):
    print(Fore.YELLOW + "    [*] Testing form for SQL Injection...", Style.RESET_ALL)
    sql_errors = [
        "you have an error in your sql syntax",
        "warning: mysql",
        "unclosed quotation mark",
        "quoted string not properly terminated"
    ]
    for payload in SQLI_TEST_PAYLOADS:
        response = submit_form(session, form, payload, base_url, urljoin)
        if response:
            for error in sql_errors:
                if error in response.text.lower():
                    print(Fore.RED + "    [!] Potential SQL Injection vulnerability found!", Style.RESET_ALL)
                    vulnerabilities.append({
                        'type': 'SQL Injection',
                        'url': base_url,
                        'form': form
                    })
                    return
